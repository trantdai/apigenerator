# coding: utf-8

"""
    Long-Running Jobs API

    API for simulating and tracking long-running jobs

    The version of the OpenAPI document: 1.0.0
    Contact: support@example.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_server.models.job_status import JobStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobResponse(BaseModel):
    """
    JobResponse
    """ # noqa: E501
    job_id: StrictStr = Field(description="Unique identifier for the job")
    status: JobStatus
    name: Optional[StrictStr] = Field(default=None, description="Optional job name")
    created_at: Union[StrictFloat, StrictInt] = Field(description="Timestamp when the job was created")
    updated_at: Union[StrictFloat, StrictInt] = Field(description="Timestamp when the job was last updated")
    completion_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of job completion (0-100)")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message if job failed")
    estimated_completion_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated timestamp when the job will complete")
    __properties: ClassVar[List[str]] = ["job_id", "status", "name", "created_at", "updated_at", "completion_percentage", "error_message", "estimated_completion_time"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if completion_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.completion_percentage is None and "completion_percentage" in self.model_fields_set:
            _dict['completion_percentage'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if estimated_completion_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_completion_time is None and "estimated_completion_time" in self.model_fields_set:
            _dict['estimated_completion_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "completion_percentage": obj.get("completion_percentage"),
            "error_message": obj.get("error_message"),
            "estimated_completion_time": obj.get("estimated_completion_time")
        })
        return _obj


